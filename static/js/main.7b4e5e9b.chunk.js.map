{"version":3,"sources":["global.js","util.js","components/Logo.jsx","components/SearchButton.jsx","components/Container.jsx","components/Button.jsx","components/Hero.jsx","App.js","serviceWorker.js","index.js"],"names":["breakpoints","theme","background","background2","text","text2","accent","accent2","GlobalStyles","createGlobalStyle","useDevice","windowWidth","useState","window","innerWidth","width","setWidth","useEffect","onWindowResize","addEventListener","removeEventListener","useWindowWidth","Title","styled","div","props","device","Logo","IconButton","button","SearchButton","onClick","aria-label","name","color","size","Container","align","alignMargin","buttonColor","variant","Button","HeroContainer","Hero","onBrowseClick","onSeeFavoritesClick","date","refreshInterval","Date","setDate","intervalId","setInterval","clearInterval","useDate","hour","getHours","timeOfDay","length","toLocaleDateString","undefined","weekday","year","month","day","Header","App","setName","alignItems","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b4e5e9b.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const breakpoints = {\r\n  mobile: 600,\r\n  tablet: 960,\r\n  desktop: 1024,\r\n}\r\n\r\nexport const theme = {\r\n  background: '#FCF9ED', // light yellow\r\n  background2: 'white',\r\n  text: '#665C84',       // purple\r\n  text2: 'white',\r\n  accent: '#FF7657',     // orange\r\n  accent2: '#FFBA5A',    // orange-yellow\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.background};\r\n    color: ${({ theme }) => theme.text};\r\n    margin: 0;\r\n  }`\r\n\r\nexport const alignMargin = (align) => {\r\n  switch (align) {\r\n    case 'left':\r\n      return '0 auto 0 0'\r\n    case 'right':\r\n      return '0 0 0 auto'\r\n    default:\r\n      return '0 auto'\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { breakpoints } from './global'\r\n\r\nexport function useWindowWidth() {\r\n  const [width, setWidth] = useState(window.innerWidth)\r\n\r\n  useEffect(() => {\r\n    const onWindowResize = () => setWidth(window.innerWidth)\r\n    window.addEventListener('resize', onWindowResize)\r\n    return () => window.removeEventListener('resize', onWindowResize)\r\n  })\r\n\r\n  return width\r\n}\r\n\r\nexport function useDevice() {\r\n  const windowWidth = useWindowWidth()\r\n\r\n  if (windowWidth < breakpoints.mobile) return 'mobile'\r\n  else if (windowWidth < breakpoints.tablet) return 'tablet'\r\n  else return 'desktop'\r\n}\r\n\r\nexport function useFetch(url, initialValue = '') {\r\n  const [data, setData] = useState(initialValue)\r\n\r\n  useEffect(() => {\r\n    fetch(url).then(response => response.json()).then(json => setData(json))\r\n  }, [url])\r\n\r\n  return data\r\n}\r\n\r\nexport function useDate(refreshInterval = 60000) {\r\n  const [date, setDate] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => setDate(new Date()), refreshInterval);\r\n    return () => clearInterval(intervalId)\r\n  }, [refreshInterval])\r\n\r\n  return date\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { theme } from '../global'\r\nimport { useDevice } from '../util'\r\n\r\nconst Title = styled.div`\r\n  @import url('https://fonts.googleapis.com/css2?family=Handlee&display=swap');\r\n  font-size: ${props => props.device === 'mobile' ? '2rem' : '3rem'};\r\n  font-weight: normal;\r\n  font-family: 'Handlee', cursive;\r\n  color: ${theme.text};\r\n`\r\n\r\nexport default function Logo() {\r\n  const device = useDevice()\r\n\r\n  return (\r\n    <Title device={device}>Recipedia</Title>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport 'boxicons'\r\nimport { theme } from '../global'\r\nimport { useDevice } from '../util'\r\nimport styled from 'styled-components'\r\n\r\nconst IconButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  padding: 0;\r\n`\r\n\r\nexport default function SearchButton(props) {\r\n  const { onClick } = props\r\n  const device = useDevice()\r\n\r\n  return (\r\n    <IconButton onClick={onClick} aria-label=\"Search\">\r\n      <box-icon\r\n        name=\"search\"\r\n        color={theme.text}\r\n        size={device === 'mobile' ? '2.5rem' : '3.5rem'}\r\n      />\r\n    </IconButton>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { breakpoints, alignMargin } from '../global'\r\n\r\nexport const Container = styled.div`\r\n  max-width: ${props => {\r\n    switch (props.device) {\r\n      case 'mobile':\r\n        return `${breakpoints.mobile}px`\r\n      case 'tablet':\r\n        return `${breakpoints.tablet}px`\r\n      default:\r\n        return `${breakpoints.desktop}px`\r\n    }\r\n  }};\r\n  margin: ${props => alignMargin(props.align)};\r\n`\r\n","import styled from 'styled-components'\r\nimport { theme } from '../global'\r\n\r\nconst buttonColor = (variant) => variant === 'secondary' ? theme.accent : theme.text\r\n\r\nexport const Button = styled.button`\r\n  border: 0;\r\n  border-radius: 5px;\r\n  color: ${theme.text2};\r\n  background-color: ${props => buttonColor(props.variant)};\r\n  font-size: ${props => props.device === 'mobile' ? '1rem' : '1.05rem'};\r\n  padding: ${props => props.device === 'mobile' ? '0.5rem 2.25rem' : '0.5rem 2.75rem'};\r\n\r\n  :active {\r\n    filter: saturate(3)\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    box-shadow: \r\n      0 0 0 3px ${theme.background},\r\n      0 0 0 5px ${props => buttonColor(props.variant)};\r\n    ;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useDevice, useDate } from '../util'\r\nimport { theme } from '../global'\r\nimport { Button } from './Button'\r\n\r\nconst HeroContainer = styled.div`\r\n  text-align: center;\r\n\r\n  h1 {\r\n    font-weight: normal;\r\n    margin: 0;\r\n  }\r\n\r\n  span {\r\n    color: ${theme.accent};\r\n  }\r\n\r\n  button {\r\n    margin: 0.5em 0.25em 0 0.25rem;\r\n  }\r\n`\r\n\r\nexport default function Hero(props) {\r\n  const { name, onBrowseClick, onSeeFavoritesClick } = props\r\n  const device = useDevice()\r\n  const date = useDate()\r\n\r\n  const timeOfDay = () => {\r\n    const hour = date.getHours()\r\n\r\n    if (hour < 12) return 'morning'\r\n    else if (hour < 17) return 'afternoon'\r\n    else return 'evening'\r\n  }\r\n\r\n  return (\r\n    <HeroContainer device={device}>\r\n      <h1>Good {timeOfDay()}{name.length > 0 && <><>, </><span>{name}</span></>}</h1>\r\n      {date.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\r\n      <div>\r\n        <Button device={device} variant=\"primary\" onClick={onBrowseClick}>Browse recipes</Button>\r\n        <Button device={device} variant=\"secondary\" onClick={onSeeFavoritesClick}>See my favorites</Button>\r\n      </div>\r\n    </HeroContainer>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { theme, GlobalStyles } from './global'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport Logo from './components/Logo'\r\nimport SearchButton from './components/SearchButton'\r\nimport styled from 'styled-components'\r\nimport { useDevice } from './util'\r\nimport { Container } from './components/Container'\r\nimport Hero from './components/Hero'\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: ${props => props.device === 'mobile' ? '0.75rem 1.25rem' : '3rem 3.5rem'};\r\n`\r\n\r\nfunction App() {\r\n  const device = useDevice()\r\n  const [name, setName] = useState('')\r\n\r\n  useEffect(() => setName('Ha'), []) // TODO: Replace this with actual user's name\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyles />\r\n      <Container device={device} align=\"right\" alignItems=\"center\">\r\n        <Header device={device}>\r\n          <Logo />\r\n          <SearchButton onClick={() => console.log('search button clicked')} />\r\n        </Header>\r\n        <main>\r\n          <Hero\r\n            name={name}\r\n            onBrowseClick={() => console.log('browse button clicked')}\r\n            onSeeFavoritesClick={() => console.log('see favorites button clicked')}\r\n          />\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}