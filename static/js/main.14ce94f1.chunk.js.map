{"version":3,"sources":["global.js","util.js","components/Logo.jsx","components/SearchButton.jsx","components/Container.jsx","components/Button.jsx","components/Hero.jsx","components/RecipeCard.jsx","components/RecipeTab.jsx","components/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["breakpoints","theme","background","background2","text","text2","accent","accent2","GlobalStyles","createGlobalStyle","useDevice","windowWidth","useState","window","innerWidth","width","setWidth","useEffect","onWindowResize","addEventListener","removeEventListener","useWindowWidth","Title","styled","div","props","device","Logo","IconButton","button","SearchButton","onClick","aria-label","name","color","size","Container","align","alignMargin","buttonColor","variant","Button","HeroContainer","Hero","onBrowseClick","onSeeFavoritesClick","date","refreshInterval","Date","setDate","intervalId","setInterval","clearInterval","useDate","hour","getHours","timeOfDay","length","toLocaleDateString","undefined","weekday","year","month","day","toLocaleTimeString","minute","RecipeCardContainer","RecipeCard","recipe","JSON","stringify","TabContainer","RecipeTab","header","recipes","buttonLabel","onButtonClick","map","index","key","SidebarContainer","Sidebar","console","log","AppContainer","App","setName","alignItems","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14ce94f1.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport const breakpoints = {\n  mobile: 600,\n  tablet: 960,\n  desktop: 1024,\n}\n\nexport const theme = {\n  background: '#FCF9ED', // light yellow\n  background2: 'white',\n  text: '#665C84',       // purple\n  text2: 'white',\n  accent: '#FF7657',     // orange\n  accent2: '#FFBA5A',    // orange-yellow\n}\n\nexport const GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  body {\n    background-color: ${({ theme }) => theme.background};\n    color: ${({ theme }) => theme.text};\n    margin: 0;\n  }`\n\nexport const alignMargin = (align) => {\n  switch (align) {\n    case 'left':\n      return '0 auto 0 0'\n    case 'right':\n      return '0 0 0 auto'\n    default:\n      return '0 auto'\n  }\n}\n","import { useState, useEffect } from 'react'\nimport { breakpoints } from './global'\n\nexport function useWindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth)\n\n  useEffect(() => {\n    const onWindowResize = () => setWidth(window.innerWidth)\n    window.addEventListener('resize', onWindowResize)\n    return () => window.removeEventListener('resize', onWindowResize)\n  })\n\n  return width\n}\n\nexport function useDevice() {\n  const windowWidth = useWindowWidth()\n\n  if (windowWidth < breakpoints.mobile) return 'mobile'\n  else if (windowWidth < breakpoints.tablet) return 'tablet'\n  else return 'desktop'\n}\n\nexport function useFetch(url, initialValue = '') {\n  const [data, setData] = useState(initialValue)\n\n  const apiKey = process.env.REACT_APP_API_KEY\n\n  useEffect(() => {\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com',\n        'x-rapidapi-key': apiKey,\n      },\n    }).then(response => response.json()).then(json => setData(json))\n  }, [url, apiKey])\n\n  return data\n}\n\nexport function useDate(refreshInterval = 60000) {\n  const [date, setDate] = useState(new Date())\n\n  useEffect(() => {\n    const intervalId = setInterval(() => setDate(new Date()), refreshInterval);\n    return () => clearInterval(intervalId)\n  }, [refreshInterval])\n\n  return date\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { theme } from '../global'\nimport { useDevice } from '../util'\n\nconst Title = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Handlee&display=swap');\n  font-size: ${props => props.device === 'mobile' ? '2rem' : '3rem'};\n  font-weight: normal;\n  font-family: 'Handlee', cursive;\n  color: ${theme.text};\n`\n\nexport default function Logo() {\n  const device = useDevice()\n\n  return (\n    <Title device={device}>Recipedia</Title>\n  )\n}\n\n","import React from 'react'\nimport 'boxicons'\nimport { theme } from '../global'\nimport { useDevice } from '../util'\nimport styled from 'styled-components'\n\nconst IconButton = styled.button`\n  background: none;\n  border: none;\n  border-radius: 10px;\n  padding: 5px 0 0 5px;\n\n  :active {\n    filter: saturate(5);\n  }\n\n  :focus {\n    outline: none;\n    box-shadow: 0 0 0 2px ${theme.text};\n  }\n`\n\nexport default function SearchButton(props) {\n  const { onClick } = props\n  const device = useDevice()\n\n  return (\n    <IconButton onClick={onClick} aria-label=\"Search\">\n      <box-icon\n        name=\"search\"\n        color={theme.text}\n        size={device === 'mobile' ? '2.5rem' : '3.5rem'}\n      />\n    </IconButton>\n  )\n}\n","import styled from 'styled-components'\nimport { breakpoints, alignMargin } from '../global'\n\nexport const Container = styled.div`\n  max-width: ${props => {\n    switch (props.device) {\n      case 'mobile':\n        return `${breakpoints.mobile}px`\n      case 'tablet':\n        return `${breakpoints.tablet}px`\n      default:\n        return `${breakpoints.desktop}px`\n    }\n  }};\n  margin: ${props => alignMargin(props.align)};\n`\n","import styled from 'styled-components'\nimport { theme } from '../global'\n\nconst buttonColor = (variant) => variant === 'secondary' ? theme.accent : theme.text\n\nexport const Button = styled.button`\n  border: 0;\n  border-radius: 5px;\n  color: ${theme.text2};\n  background-color: ${props => buttonColor(props.variant)};\n  font-size: ${props => props.device === 'mobile' ? '1rem' : '1.05rem'};\n  padding: ${props => props.device === 'mobile' ? '0.5rem 2.25rem' : '0.5rem 2.75rem'};\n\n  :active {\n    filter: saturate(5);\n  }\n\n  :focus {\n    outline: none;\n    box-shadow: \n      0 0 0 3px ${theme.background},\n      0 0 0 5px ${props => buttonColor(props.variant)};\n    ;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useDevice, useDate } from '../util'\nimport { theme } from '../global'\nimport { Button } from './Button'\n\nconst HeroContainer = styled.div`\n  text-align: center;\n\n  h1 {\n    font-weight: normal;\n    margin: 0;\n  }\n\n  span {\n    color: ${theme.accent};\n  }\n\n  button {\n    margin: 0.5em 0.25em 0 0.25rem;\n  }\n`\n\nexport default function Hero(props) {\n  const { name, onBrowseClick, onSeeFavoritesClick } = props\n  const device = useDevice()\n  const date = useDate()\n\n  const timeOfDay = () => {\n    const hour = date.getHours()\n\n    if (hour < 12) return 'morning'\n    else if (hour < 17) return 'afternoon'\n    else return 'evening'\n  }\n\n  return (\n    <HeroContainer device={device}>\n      <h1>Good {timeOfDay()}{name.length > 0 && <><>, </><span>{name}</span></>}</h1>\n      {date.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) +\n        ' ' + date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' })}\n      <div>\n        <Button device={device} variant=\"primary\" onClick={onBrowseClick}>Browse recipes</Button>\n        <Button device={device} variant=\"secondary\" onClick={onSeeFavoritesClick}>See my favorites</Button>\n      </div>\n    </HeroContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst RecipeCardContainer = styled.div`\n  display: flex;\n`\n\nexport default function RecipeCard(props) {\n  const { recipe } = props\n\n  // TODO: Display actual recipe card\n  return (\n    <RecipeCardContainer>\n      {JSON.stringify(recipe)}\n    </RecipeCardContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport RecipeCard from './RecipeCard'\nimport { Button } from './Button'\nimport { theme } from '../global'\n\nconst TabContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: ${theme.background2};\n  width: 20rem;\n  height: 100vh;\n  padding: 1rem 2rem;\n\n  h2 {\n    font-weight: 500;\n  }\n`\n\nexport default function RecipeTab(props) {\n  const { header, recipes, buttonLabel, onButtonClick } = props\n\n  return (\n    <TabContainer>\n      <h2>{header}</h2>\n      {recipes.map((recipe, index) => <RecipeCard key={`recipe-${header}-${index}`} recipe={recipe} />)}\n      <Button onClick={onButtonClick}>{buttonLabel}</Button>\n    </TabContainer>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport RecipeTab from './RecipeTab'\n// import { useFetch } from '../util'\n\nconst SidebarContainer = styled.div`\n  display: flex;\n`\n\nexport default function Sidebar() {\n  // const sampleRecipe = useFetch('https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/479101/information?includeNutrition=true')\n\n  return (\n    <SidebarContainer>\n      <RecipeTab\n        header=\"Discover\"\n        recipes={[]}\n        buttonLabel=\"See recent\"\n        onButtonClick={() => console.log('see recent button clicked')}\n      />\n      <RecipeTab\n        header=\"My favorites\"\n        recipes={[]}\n        buttonLabel=\"See favorites\"\n        onButtonClick={() => console.log('see favorites button clicked')}\n      />\n    </SidebarContainer>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { theme, GlobalStyles } from './global'\nimport { ThemeProvider } from 'styled-components'\nimport Logo from './components/Logo'\nimport SearchButton from './components/SearchButton'\nimport styled from 'styled-components'\nimport { useDevice } from './util'\nimport { Container } from './components/Container'\nimport Hero from './components/Hero'\nimport Sidebar from './components/Sidebar'\n\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  article {\n    padding: ${props => props.device === 'mobile' ? '0.75rem 1.25rem' : '3rem 3.5rem'};\n  }\n\n  header {\n    display: flex;\n    justify-content: space-between;\n    margin: 0;\n  }\n`\n\nfunction App() {\n  const device = useDevice()\n  const [name, setName] = useState('')\n\n  useEffect(() => setName('Ha'), []) // TODO: Replace this with actual user's name\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <AppContainer>\n        <Container device={device} align=\"right\" alignItems=\"center\">\n          <article>\n            <header>\n              <Logo />\n              <SearchButton onClick={() => console.log('search button clicked')} />\n            </header>\n            <main>\n              <Hero\n                name={name}\n                onBrowseClick={() => console.log('browse button clicked')}\n                onSeeFavoritesClick={() => console.log('see favorites button clicked')}\n              />\n            </main>\n          </article>\n        </Container>\n        <aside><Sidebar /></aside>\n      </AppContainer>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}