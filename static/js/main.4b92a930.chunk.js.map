{"version":3,"sources":["global.js","util.js","components/Logo.jsx","components/SearchButton.jsx","App.js","serviceWorker.js","index.js"],"names":["theme","background","background2","text","text2","accent","accent2","GlobalStyles","createGlobalStyle","useDevice","windowWidth","useState","window","innerWidth","width","setWidth","useEffect","onWindowResize","addEventListener","removeEventListener","useWindowWidth","Title","styled","div","Logo","device","IconButton","button","SearchButton","props","onClick","name","color","size","Main","main","App","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iqBAEO,IAAMA,EAAQ,CACnBC,WAAY,UACZC,YAAa,QACbC,KAAM,UACNC,MAAO,QACPC,OAAQ,UACRC,QAAS,WAGEC,EAAeC,YAAH,KAQD,qBAAGR,MAAkBC,cAChC,qBAAGD,MAAkBG,Q,OCN3B,SAASM,IACd,IAAMC,EAbD,WAA2B,IAAD,EACLC,mBAASC,OAAOC,YADX,mBACxBC,EADwB,KACjBC,EADiB,KAS/B,OANAC,qBAAU,WACR,IAAMC,EAAiB,kBAAMF,EAASH,OAAOC,aAE7C,OADAD,OAAOM,iBAAiB,SAAUD,GAC3B,kBAAML,OAAOO,oBAAoB,SAAUF,OAG7CH,EAIaM,GAEpB,OAAIV,EAAc,IAAY,SACrBA,EAAc,IAAY,SACvB,U,uPCdd,IAAMW,EAAQC,IAAOC,IAAV,IAKAvB,EAAMG,MAGF,SAASqB,IACtB,IAAMC,EAAShB,IAEf,OACE,kBAACY,EAAD,CAAOI,OAAQA,GAAf,a,mHCXJ,IAAMC,EAAaJ,IAAOK,OAAV,KAKD,SAASC,EAAaC,GAAQ,IACnCC,EAAYD,EAAZC,QACFL,EAAShB,IAEf,OACE,kBAACiB,EAAD,CAAYI,QAASA,GACnB,8BACEC,KAAK,SACLC,MAAOhC,EAAMG,KACb8B,KAAiB,WAAXR,EAAsB,KAAO,Q,4ICb3C,IAAMS,EAAOZ,IAAOa,KAAV,KAGE,SAAAN,GAAK,MAAqB,WAAjBA,EAAMJ,OAAsB,eAAiB,kBAenDW,MAZf,WACE,OACE,kBAAC,IAAD,CAAepC,MAAOA,GACpB,kBAACkC,EAAD,KACE,kBAAC3B,EAAD,MACA,kBAACiB,EAAD,MACA,kBAACI,EAAD,CAAcE,QAAS,kBAAMO,QAAQC,IAAI,+BCP7BC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.4b92a930.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const theme = {\r\n  background: '#FCF9ED', // light yellow\r\n  background2: 'white',\r\n  text: '#665C84',       // purple\r\n  text2: 'white',\r\n  accent: '#FF7657',     // orange\r\n  accent2: '#FFBA5A',    // orange-yellow\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.background};\r\n    color: ${({ theme }) => theme.text};\r\n    margin: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }`\r\n","import { useState, useEffect } from 'react'\r\n\r\nexport function useWindowWidth() {\r\n  const [width, setWidth] = useState(window.innerWidth)\r\n\r\n  useEffect(() => {\r\n    const onWindowResize = () => setWidth(window.innerWidth)\r\n    window.addEventListener('resize', onWindowResize)\r\n    return () => window.removeEventListener('resize', onWindowResize)\r\n  })\r\n\r\n  return width\r\n}\r\n\r\nexport function useDevice() {\r\n  const windowWidth = useWindowWidth()\r\n\r\n  if (windowWidth < 600) return 'mobile'\r\n  else if (windowWidth < 960) return 'tablet'\r\n  else return 'desktop'\r\n}\r\n\r\nexport function useFetch(url, initialValue = '') {\r\n  const [data, setData] = useState(initialValue)\r\n\r\n  useEffect(() => {\r\n    fetch(url).then(response => response.json()).then(json => setData(json))\r\n  }, [url])\r\n\r\n  return data\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { theme } from '../global'\r\nimport { useDevice } from '../util'\r\n\r\nconst Title = styled.div`\r\n  @import url('https://fonts.googleapis.com/css2?family=Handlee&display=swap');\r\n  font-size: 2rem;\r\n  font-weight: normal;\r\n  font-family: 'Handlee', cursive;\r\n  color: ${theme.text};\r\n`\r\n\r\nexport default function Logo() {\r\n  const device = useDevice()\r\n\r\n  return (\r\n    <Title device={device}>Recipedia</Title>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport 'boxicons'\r\nimport { theme } from '../global'\r\nimport { useDevice } from '../util'\r\nimport styled from 'styled-components'\r\n\r\nconst IconButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n`\r\n\r\nexport default function SearchButton(props) {\r\n  const { onClick } = props\r\n  const device = useDevice()\r\n\r\n  return (\r\n    <IconButton onClick={onClick}>\r\n      <box-icon\r\n        name=\"search\"\r\n        color={theme.text}\r\n        size={device === 'mobile' ? 'md' : 'lg'}\r\n      />\r\n    </IconButton>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { theme, GlobalStyles } from './global'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport Logo from './components/Logo'\r\nimport SearchButton from './components/SearchButton'\r\nimport styled from 'styled-components'\r\n\r\nconst Main = styled.main`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: ${props => props.device === 'mobile' ? '1rem 1.25rem' : '3rem 3.25rem' };\r\n`\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Main>\r\n        <GlobalStyles />\r\n        <Logo />\r\n        <SearchButton onClick={() => console.log('search button clicked')} />\r\n      </Main>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}